security:
    encoders:
        App\Entity\Medewerker: bcrypt
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        in_memory: { memory: ~ }
        users:
            id: App\Security\UserProvider
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        sonata:
            pattern: ^/%sonata_prefix%(.*)
            context: sonata_login
            provider: users
            form_login:
                login_path: sonata_login
                use_forward: false
                check_path: sonata_login
                failure_path: null
                csrf_token_id: authenticate
            logout:
                path: sonata_logout
                target: sonata_login
            anonymous: true
            guard:
                authenticators:
                    - App\Security\LoginFormAuthenticator
            two_factor:
                auth_form_path: 2fa_login
                check_path: 2fa_login_check
        main:
            anonymous: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/%sonata_prefix%/login, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/%sonata_prefix%/logout, roles: [ROLE_USER, IS_AUTHENTICATED_2FA_IN_PROGRESS] }
        - { path: ^/%sonata_prefix%/2fa, role: IS_AUTHENTICATED_2FA_IN_PROGRESS }
        - { path: ^/%sonata_prefix%/, role: ROLE_USER }
