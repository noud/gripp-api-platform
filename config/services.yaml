# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'nl'
    gripp_cache_ttl: '%env(GRIPP_CACHE_TTL)%'
    api_docs_url: '%env(GRIPP_API_DOCS_URL)%'
    api_docs_name: '%env(GRIPP_API_DOCS_NAME)%'
    sonata_prefix: 'sonata'
    sonata_skin_color: 'blue'
    
imports:
    - { resource: 'services_sonata.yaml' }

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php,Rpc}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # cache
    App\Service\CacheService:
            - ''
            - '%gripp_cache_ttl%'

    Symfony\Component\Cache\Simple\FilesystemCache:
    
    Psr\SimpleCache\CacheInterface: '@Symfony\Component\Cache\Simple\FilesystemCache'
    
    
    # Sonata  
    authentication_route_loader:
        public: true
        class: App\Routing\AuthenticationLoader
        arguments:
            - "%sonata_prefix%"

    App\Routing\AuthenticationLoader:
        tags: [routing.loader]
        arguments:
            - "%sonata_prefix%"
    
    # API client JSON-RPC
    App\Controller\Gripp\TagController:
        arguments:
            - '%kernel.environment%'
            - ''

#    sonata.medewerker.form.salutation_type:
#        class: '@Sonata\Form\Type\StatusType'
#        class: '@App\Type\MedewerkerSalutationType'
#        tags:
#            - { name: form.type }
#        arguments:
##            - '%sonata.order.order.class%'
##            - '%sonata.medewerker.class%'
#            - '@sonata.medewerker.class'
##            - '%sonata.medewerker.medewerker.class%'
#            - 'getSalutationList'
#            - 'sonata_medewerker_salutation'
#    sonata.medewerker.class:
#        class: App\Entity\Medewerker
#        #class: App\Type\MedewerkerSalutationType

    admin.medewerker:
        class: App\Admin\MedewerkerAdmin
        arguments: [~, App\Entity\Medewerker, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Medewerker }
        public: true
        calls:
            - [setTemplate, ['edit', 'bundles/SonataAdminBundle/CRUD/2fa_edit.html.twig']]

    App\Doctrine\HashPasswordListener:
        tags:
            - doctrine.event_subscriber
            
    App\Command\Doctrine\ImportMappingDoctrineCommand:
        arguments:
            - '@doctrine'
            - {}
        tags:
            - { name: console.command, command: 'app:mapping:import' }
            
    App\Command\SonataAdmin\AdminMaker:
        arguments:
            - '%kernel.project_dir%'
            - {'sonata.admin.manager.orm': '@sonata.admin.manager.orm'}
        tags:
            - { name: maker.command }
            
    sonata.block.service.timeline:
        class: App\Sonata\BlockBundle\Block\Service\TimelineBlockService
        arguments:
            - ~
            - '@sonata.templating'
        tags:
            - { name: sonata.block }